name: Build

'on':
  'push':
    'tags':
      - 'v*'
    'branches':
      - '*'
  'pull_request':

jobs:
  tests:
    runs-on: ${{ matrix.os }}
    env:
      DOTNET_VERSION: '8.0.x'
    strategy:
      matrix:
        os:
          - windows-latest
          - macos-latest
          - ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        run: dotnet test --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        if: "success() && matrix.os == 'ubuntu-latest'"
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage

  build:
    needs:
      - tests
    runs-on: ubuntu-latest
    env:
      DOTNET_VERSION: '8.0.x'
      PROJECT_PATH: 'src/OpenVsixSignTool/OpenVsixSignTool.csproj'
    strategy:
      matrix:
        runtime: [win-x64, win-arm64, osx-x64, osx-arm64, linux-x64, linux-arm64]
        include:
          - runtime: win-x64
            archive_cmd: 'zip -r'
            archive_ext: 'zip'
          - runtime: win-arm64
            archive_cmd: 'zip -r'
            archive_ext: 'zip'
          - runtime: osx-x64
            archive_cmd: 'tar -czf'
            archive_ext: 'tar.gz'
          - runtime: osx-arm64
            archive_cmd: 'tar -czf'
            archive_ext: 'tar.gz'
          - runtime: linux-x64
            archive_cmd: 'tar -czf'
            archive_ext: 'tar.gz'
          - runtime: linux-arm64
            archive_cmd: 'tar -czf'
            archive_ext: 'tar.gz'
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Prepare environment
        run: |-
          RELEASE_VERSION="${GITHUB_REF##*/}"
          if [[ "${RELEASE_VERSION}" != v* ]]; then RELEASE_VERSION='dev'; fi
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
          mkdir -p build

      - name: Restore dependencies
        run: dotnet restore

      - name: Build ${{ matrix.runtime }}
        run: |
          dotnet publish ${{ env.PROJECT_PATH }} \
            --configuration Release \
            --runtime ${{ matrix.runtime }} \
            --self-contained true \
            --output ./publish/${{ matrix.runtime }} \
            -p:PublishSingleFile=true \
            -p:IncludeNativeLibrariesForSelfExtract=true \
            -p:PublishTrimmed=false
          cd ./publish/${{ matrix.runtime }}
          ${{ matrix.archive_cmd }} ../../build/OpenVsixSignTool-${RELEASE_VERSION}-${{ matrix.runtime }}.${{ matrix.archive_ext }} .

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: OpenVsixSignTool-${{ matrix.runtime }}
          path: build/OpenVsixSignTool-*.${{ matrix.archive_ext }}
          retention-days: 30

  create-release:
    needs:
      - build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Prepare environment
        run: |-
          RELEASE_VERSION="${GITHUB_REF##*/}"
          if [[ "${RELEASE_VERSION}" != v* ]]; then RELEASE_VERSION='dev'; fi
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Move artifacts to build directory
        run: |
          mkdir -p build
          find ./artifacts -name "*.zip" -o -name "*.tar.gz" | xargs -I {} mv {} ./build/
          ls -la build/

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ env.RELEASE_VERSION }}
          body: 'See [CHANGELOG.md](./CHANGELOG.md) for the list of changes.'
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
          generate_release_notes: true
          files: |
            build/OpenVsixSignTool-*.tar.gz
            build/OpenVsixSignTool-*.zip
            CHANGELOG.md